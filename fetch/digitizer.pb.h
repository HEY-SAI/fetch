// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: digitizer.proto

#ifndef PROTOBUF_digitizer_2eproto__INCLUDED
#define PROTOBUF_digitizer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace fetch {
namespace cfg {
namespace device {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_digitizer_2eproto();
void protobuf_AssignDesc_digitizer_2eproto();
void protobuf_ShutdownFile_digitizer_2eproto();

class Digitizer;
class Digitizer_Channel;

enum Digitizer_Channel_Coupling {
  Digitizer_Channel_Coupling_AC = 0,
  Digitizer_Channel_Coupling_DC = 1
};
bool Digitizer_Channel_Coupling_IsValid(int value);
const Digitizer_Channel_Coupling Digitizer_Channel_Coupling_Coupling_MIN = Digitizer_Channel_Coupling_AC;
const Digitizer_Channel_Coupling Digitizer_Channel_Coupling_Coupling_MAX = Digitizer_Channel_Coupling_DC;
const int Digitizer_Channel_Coupling_Coupling_ARRAYSIZE = Digitizer_Channel_Coupling_Coupling_MAX + 1;

const ::google::protobuf::EnumDescriptor* Digitizer_Channel_Coupling_descriptor();
inline const ::std::string& Digitizer_Channel_Coupling_Name(Digitizer_Channel_Coupling value) {
  return ::google::protobuf::internal::NameOfEnum(
    Digitizer_Channel_Coupling_descriptor(), value);
}
inline bool Digitizer_Channel_Coupling_Parse(
    const ::std::string& name, Digitizer_Channel_Coupling* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Digitizer_Channel_Coupling>(
    Digitizer_Channel_Coupling_descriptor(), name, value);
}
// ===================================================================

class Digitizer_Channel : public ::google::protobuf::Message {
 public:
  Digitizer_Channel();
  virtual ~Digitizer_Channel();
  
  Digitizer_Channel(const Digitizer_Channel& from);
  
  inline Digitizer_Channel& operator=(const Digitizer_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Digitizer_Channel& default_instance();
  
  void Swap(Digitizer_Channel* other);
  
  // implements Message ----------------------------------------------
  
  Digitizer_Channel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Digitizer_Channel& from);
  void MergeFrom(const Digitizer_Channel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Digitizer_Channel_Coupling Coupling;
  static const Coupling AC = Digitizer_Channel_Coupling_AC;
  static const Coupling DC = Digitizer_Channel_Coupling_DC;
  static inline bool Coupling_IsValid(int value) {
    return Digitizer_Channel_Coupling_IsValid(value);
  }
  static const Coupling Coupling_MIN =
    Digitizer_Channel_Coupling_Coupling_MIN;
  static const Coupling Coupling_MAX =
    Digitizer_Channel_Coupling_Coupling_MAX;
  static const int Coupling_ARRAYSIZE =
    Digitizer_Channel_Coupling_Coupling_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Coupling_descriptor() {
    return Digitizer_Channel_Coupling_descriptor();
  }
  static inline const ::std::string& Coupling_Name(Coupling value) {
    return Digitizer_Channel_Coupling_Name(value);
  }
  static inline bool Coupling_Parse(const ::std::string& name,
      Coupling* value) {
    return Digitizer_Channel_Coupling_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1 [default = "0"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional double range = 2 [default = 1];
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 2;
  inline double range() const;
  inline void set_range(double value);
  
  // optional .fetch.cfg.device.Digitizer.Channel.Coupling coupling = 3 [default = DC];
  inline bool has_coupling() const;
  inline void clear_coupling();
  static const int kCouplingFieldNumber = 3;
  inline ::fetch::cfg::device::Digitizer_Channel_Coupling coupling() const;
  inline void set_coupling(::fetch::cfg::device::Digitizer_Channel_Coupling value);
  
  // optional bool enabled = 4 [default = false];
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 4;
  inline bool enabled() const;
  inline void set_enabled(bool value);
  
  // @@protoc_insertion_point(class_scope:fetch.cfg.device.Digitizer.Channel)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  double range_;
  int coupling_;
  bool enabled_;
  friend void  protobuf_AddDesc_digitizer_2eproto();
  friend void protobuf_AssignDesc_digitizer_2eproto();
  friend void protobuf_ShutdownFile_digitizer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Digitizer_Channel* default_instance_;
};
// -------------------------------------------------------------------

class Digitizer : public ::google::protobuf::Message {
 public:
  Digitizer();
  virtual ~Digitizer();
  
  Digitizer(const Digitizer& from);
  
  inline Digitizer& operator=(const Digitizer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Digitizer& default_instance();
  
  void Swap(Digitizer* other);
  
  // implements Message ----------------------------------------------
  
  Digitizer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Digitizer& from);
  void MergeFrom(const Digitizer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Digitizer_Channel Channel;
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1 [default = "Dev3"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional double sample_rate = 2 [default = 60000000];
  inline bool has_sample_rate() const;
  inline void clear_sample_rate();
  static const int kSampleRateFieldNumber = 2;
  inline double sample_rate() const;
  inline void set_sample_rate(double value);
  
  // optional uint32 record_size = 3 [default = 7196];
  inline bool has_record_size() const;
  inline void clear_record_size();
  static const int kRecordSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 record_size() const;
  inline void set_record_size(::google::protobuf::uint32 value);
  
  // optional uint32 num_records = 4 [default = 256];
  inline bool has_num_records() const;
  inline void clear_num_records();
  static const int kNumRecordsFieldNumber = 4;
  inline ::google::protobuf::uint32 num_records() const;
  inline void set_num_records(::google::protobuf::uint32 value);
  
  // optional double reference = 5 [default = 0];
  inline bool has_reference() const;
  inline void clear_reference();
  static const int kReferenceFieldNumber = 5;
  inline double reference() const;
  inline void set_reference(double value);
  
  // optional string chan_names = 6 [default = "0"];
  inline bool has_chan_names() const;
  inline void clear_chan_names();
  static const int kChanNamesFieldNumber = 6;
  inline const ::std::string& chan_names() const;
  inline void set_chan_names(const ::std::string& value);
  inline void set_chan_names(const char* value);
  inline void set_chan_names(const char* value, size_t size);
  inline ::std::string* mutable_chan_names();
  
  // optional uint32 nchannels = 7 [default = 1];
  inline bool has_nchannels() const;
  inline void clear_nchannels();
  static const int kNchannelsFieldNumber = 7;
  inline ::google::protobuf::uint32 nchannels() const;
  inline void set_nchannels(::google::protobuf::uint32 value);
  
  // repeated .fetch.cfg.device.Digitizer.Channel channel = 8;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 8;
  inline const ::fetch::cfg::device::Digitizer_Channel& channel(int index) const;
  inline ::fetch::cfg::device::Digitizer_Channel* mutable_channel(int index);
  inline ::fetch::cfg::device::Digitizer_Channel* add_channel();
  inline const ::google::protobuf::RepeatedPtrField< ::fetch::cfg::device::Digitizer_Channel >&
      channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::fetch::cfg::device::Digitizer_Channel >*
      mutable_channel();
  
  // @@protoc_insertion_point(class_scope:fetch.cfg.device.Digitizer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  double sample_rate_;
  ::google::protobuf::uint32 record_size_;
  ::google::protobuf::uint32 num_records_;
  double reference_;
  ::std::string* chan_names_;
  static const ::std::string _default_chan_names_;
  ::google::protobuf::uint32 nchannels_;
  ::google::protobuf::RepeatedPtrField< ::fetch::cfg::device::Digitizer_Channel > channel_;
  friend void  protobuf_AddDesc_digitizer_2eproto();
  friend void protobuf_AssignDesc_digitizer_2eproto();
  friend void protobuf_ShutdownFile_digitizer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Digitizer* default_instance_;
};
// ===================================================================


// ===================================================================

// Digitizer_Channel

// optional string name = 1 [default = "0"];
inline bool Digitizer_Channel::has_name() const {
  return _has_bit(0);
}
inline void Digitizer_Channel::clear_name() {
  if (name_ != &_default_name_) {
    name_->assign(_default_name_);
  }
  _clear_bit(0);
}
inline const ::std::string& Digitizer_Channel::name() const {
  return *name_;
}
inline void Digitizer_Channel::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Digitizer_Channel::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Digitizer_Channel::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Digitizer_Channel::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string(_default_name_);
  }
  return name_;
}

// optional double range = 2 [default = 1];
inline bool Digitizer_Channel::has_range() const {
  return _has_bit(1);
}
inline void Digitizer_Channel::clear_range() {
  range_ = 1;
  _clear_bit(1);
}
inline double Digitizer_Channel::range() const {
  return range_;
}
inline void Digitizer_Channel::set_range(double value) {
  _set_bit(1);
  range_ = value;
}

// optional .fetch.cfg.device.Digitizer.Channel.Coupling coupling = 3 [default = DC];
inline bool Digitizer_Channel::has_coupling() const {
  return _has_bit(2);
}
inline void Digitizer_Channel::clear_coupling() {
  coupling_ = 1;
  _clear_bit(2);
}
inline ::fetch::cfg::device::Digitizer_Channel_Coupling Digitizer_Channel::coupling() const {
  return static_cast< ::fetch::cfg::device::Digitizer_Channel_Coupling >(coupling_);
}
inline void Digitizer_Channel::set_coupling(::fetch::cfg::device::Digitizer_Channel_Coupling value) {
  GOOGLE_DCHECK(::fetch::cfg::device::Digitizer_Channel_Coupling_IsValid(value));
  _set_bit(2);
  coupling_ = value;
}

// optional bool enabled = 4 [default = false];
inline bool Digitizer_Channel::has_enabled() const {
  return _has_bit(3);
}
inline void Digitizer_Channel::clear_enabled() {
  enabled_ = false;
  _clear_bit(3);
}
inline bool Digitizer_Channel::enabled() const {
  return enabled_;
}
inline void Digitizer_Channel::set_enabled(bool value) {
  _set_bit(3);
  enabled_ = value;
}

// -------------------------------------------------------------------

// Digitizer

// optional string name = 1 [default = "Dev3"];
inline bool Digitizer::has_name() const {
  return _has_bit(0);
}
inline void Digitizer::clear_name() {
  if (name_ != &_default_name_) {
    name_->assign(_default_name_);
  }
  _clear_bit(0);
}
inline const ::std::string& Digitizer::name() const {
  return *name_;
}
inline void Digitizer::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Digitizer::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Digitizer::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Digitizer::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string(_default_name_);
  }
  return name_;
}

// optional double sample_rate = 2 [default = 60000000];
inline bool Digitizer::has_sample_rate() const {
  return _has_bit(1);
}
inline void Digitizer::clear_sample_rate() {
  sample_rate_ = 60000000;
  _clear_bit(1);
}
inline double Digitizer::sample_rate() const {
  return sample_rate_;
}
inline void Digitizer::set_sample_rate(double value) {
  _set_bit(1);
  sample_rate_ = value;
}

// optional uint32 record_size = 3 [default = 7196];
inline bool Digitizer::has_record_size() const {
  return _has_bit(2);
}
inline void Digitizer::clear_record_size() {
  record_size_ = 7196u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 Digitizer::record_size() const {
  return record_size_;
}
inline void Digitizer::set_record_size(::google::protobuf::uint32 value) {
  _set_bit(2);
  record_size_ = value;
}

// optional uint32 num_records = 4 [default = 256];
inline bool Digitizer::has_num_records() const {
  return _has_bit(3);
}
inline void Digitizer::clear_num_records() {
  num_records_ = 256u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Digitizer::num_records() const {
  return num_records_;
}
inline void Digitizer::set_num_records(::google::protobuf::uint32 value) {
  _set_bit(3);
  num_records_ = value;
}

// optional double reference = 5 [default = 0];
inline bool Digitizer::has_reference() const {
  return _has_bit(4);
}
inline void Digitizer::clear_reference() {
  reference_ = 0;
  _clear_bit(4);
}
inline double Digitizer::reference() const {
  return reference_;
}
inline void Digitizer::set_reference(double value) {
  _set_bit(4);
  reference_ = value;
}

// optional string chan_names = 6 [default = "0"];
inline bool Digitizer::has_chan_names() const {
  return _has_bit(5);
}
inline void Digitizer::clear_chan_names() {
  if (chan_names_ != &_default_chan_names_) {
    chan_names_->assign(_default_chan_names_);
  }
  _clear_bit(5);
}
inline const ::std::string& Digitizer::chan_names() const {
  return *chan_names_;
}
inline void Digitizer::set_chan_names(const ::std::string& value) {
  _set_bit(5);
  if (chan_names_ == &_default_chan_names_) {
    chan_names_ = new ::std::string;
  }
  chan_names_->assign(value);
}
inline void Digitizer::set_chan_names(const char* value) {
  _set_bit(5);
  if (chan_names_ == &_default_chan_names_) {
    chan_names_ = new ::std::string;
  }
  chan_names_->assign(value);
}
inline void Digitizer::set_chan_names(const char* value, size_t size) {
  _set_bit(5);
  if (chan_names_ == &_default_chan_names_) {
    chan_names_ = new ::std::string;
  }
  chan_names_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Digitizer::mutable_chan_names() {
  _set_bit(5);
  if (chan_names_ == &_default_chan_names_) {
    chan_names_ = new ::std::string(_default_chan_names_);
  }
  return chan_names_;
}

// optional uint32 nchannels = 7 [default = 1];
inline bool Digitizer::has_nchannels() const {
  return _has_bit(6);
}
inline void Digitizer::clear_nchannels() {
  nchannels_ = 1u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 Digitizer::nchannels() const {
  return nchannels_;
}
inline void Digitizer::set_nchannels(::google::protobuf::uint32 value) {
  _set_bit(6);
  nchannels_ = value;
}

// repeated .fetch.cfg.device.Digitizer.Channel channel = 8;
inline int Digitizer::channel_size() const {
  return channel_.size();
}
inline void Digitizer::clear_channel() {
  channel_.Clear();
}
inline const ::fetch::cfg::device::Digitizer_Channel& Digitizer::channel(int index) const {
  return channel_.Get(index);
}
inline ::fetch::cfg::device::Digitizer_Channel* Digitizer::mutable_channel(int index) {
  return channel_.Mutable(index);
}
inline ::fetch::cfg::device::Digitizer_Channel* Digitizer::add_channel() {
  return channel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fetch::cfg::device::Digitizer_Channel >&
Digitizer::channel() const {
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::fetch::cfg::device::Digitizer_Channel >*
Digitizer::mutable_channel() {
  return &channel_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace device
}  // namespace cfg
}  // namespace fetch

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fetch::cfg::device::Digitizer_Channel_Coupling>() {
  return ::fetch::cfg::device::Digitizer_Channel_Coupling_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_digitizer_2eproto__INCLUDED
