// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "digitizer.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fetch {
namespace cfg {
namespace device {

namespace {

const ::google::protobuf::Descriptor* Digitizer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Digitizer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Digitizer_Channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Digitizer_Channel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Digitizer_Channel_Coupling_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_digitizer_2eproto() {
  protobuf_AddDesc_digitizer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "digitizer.proto");
  GOOGLE_CHECK(file != NULL);
  Digitizer_descriptor_ = file->message_type(0);
  static const int Digitizer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer, sample_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer, record_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer, num_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer, reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer, chan_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer, nchannels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer, channel_),
  };
  Digitizer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Digitizer_descriptor_,
      Digitizer::default_instance_,
      Digitizer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Digitizer));
  Digitizer_Channel_descriptor_ = Digitizer_descriptor_->nested_type(0);
  static const int Digitizer_Channel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer_Channel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer_Channel, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer_Channel, coupling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer_Channel, enabled_),
  };
  Digitizer_Channel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Digitizer_Channel_descriptor_,
      Digitizer_Channel::default_instance_,
      Digitizer_Channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer_Channel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digitizer_Channel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Digitizer_Channel));
  Digitizer_Channel_Coupling_descriptor_ = Digitizer_Channel_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_digitizer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Digitizer_descriptor_, &Digitizer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Digitizer_Channel_descriptor_, &Digitizer_Channel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_digitizer_2eproto() {
  delete Digitizer::default_instance_;
  delete Digitizer_reflection_;
  delete Digitizer_Channel::default_instance_;
  delete Digitizer_Channel_reflection_;
}

void protobuf_AddDesc_digitizer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017digitizer.proto\022\020fetch.cfg.device\"\223\003\n\t"
    "Digitizer\022\022\n\004name\030\001 \001(\t:\004Dev3\022\035\n\013sample_"
    "rate\030\002 \001(\001:\01060000000\022\031\n\013record_size\030\003 \001("
    "\r:\0047196\022\030\n\013num_records\030\004 \001(\r:\003256\022\024\n\tref"
    "erence\030\005 \001(\001:\0010\022\025\n\nchan_names\030\006 \001(\t:\0010\022\024"
    "\n\tnchannels\030\007 \001(\r:\0011\0224\n\007channel\030\010 \003(\0132#."
    "fetch.cfg.device.Digitizer.Channel\032\244\001\n\007C"
    "hannel\022\017\n\004name\030\001 \001(\t:\0010\022\020\n\005range\030\002 \001(\001:\001"
    "1\022B\n\010coupling\030\003 \001(\0162,.fetch.cfg.device.D"
    "igitizer.Channel.Coupling:\002DC\022\026\n\007enabled"
    "\030\004 \001(\010:\005false\"\032\n\010Coupling\022\006\n\002AC\020\000\022\006\n\002DC\020"
    "\001", 441);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "digitizer.proto", &protobuf_RegisterTypes);
  Digitizer::default_instance_ = new Digitizer();
  Digitizer_Channel::default_instance_ = new Digitizer_Channel();
  Digitizer::default_instance_->InitAsDefaultInstance();
  Digitizer_Channel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_digitizer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_digitizer_2eproto {
  StaticDescriptorInitializer_digitizer_2eproto() {
    protobuf_AddDesc_digitizer_2eproto();
  }
} static_descriptor_initializer_digitizer_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Digitizer_Channel_Coupling_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Digitizer_Channel_Coupling_descriptor_;
}
bool Digitizer_Channel_Coupling_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Digitizer_Channel_Coupling Digitizer_Channel::AC;
const Digitizer_Channel_Coupling Digitizer_Channel::DC;
const Digitizer_Channel_Coupling Digitizer_Channel::Coupling_MIN;
const Digitizer_Channel_Coupling Digitizer_Channel::Coupling_MAX;
const int Digitizer_Channel::Coupling_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Digitizer_Channel::_default_name_("0");
#ifndef _MSC_VER
const int Digitizer_Channel::kNameFieldNumber;
const int Digitizer_Channel::kRangeFieldNumber;
const int Digitizer_Channel::kCouplingFieldNumber;
const int Digitizer_Channel::kEnabledFieldNumber;
#endif  // !_MSC_VER

Digitizer_Channel::Digitizer_Channel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Digitizer_Channel::InitAsDefaultInstance() {
}

Digitizer_Channel::Digitizer_Channel(const Digitizer_Channel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Digitizer_Channel::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  range_ = 1;
  coupling_ = 1;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Digitizer_Channel::~Digitizer_Channel() {
  SharedDtor();
}

void Digitizer_Channel::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Digitizer_Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Digitizer_Channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Digitizer_Channel_descriptor_;
}

const Digitizer_Channel& Digitizer_Channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_digitizer_2eproto();  return *default_instance_;
}

Digitizer_Channel* Digitizer_Channel::default_instance_ = NULL;

Digitizer_Channel* Digitizer_Channel::New() const {
  return new Digitizer_Channel;
}

void Digitizer_Channel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->assign(_default_name_);
      }
    }
    range_ = 1;
    coupling_ = 1;
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Digitizer_Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "0"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_range;
        break;
      }
      
      // optional double range = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coupling;
        break;
      }
      
      // optional .fetch.cfg.device.Digitizer.Channel.Coupling coupling = 3 [default = DC];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coupling:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fetch::cfg::device::Digitizer_Channel_Coupling_IsValid(value)) {
            set_coupling(static_cast< ::fetch::cfg::device::Digitizer_Channel_Coupling >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enabled;
        break;
      }
      
      // optional bool enabled = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Digitizer_Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "0"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional double range = 2 [default = 1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->range(), output);
  }
  
  // optional .fetch.cfg.device.Digitizer.Channel.Coupling coupling = 3 [default = DC];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->coupling(), output);
  }
  
  // optional bool enabled = 4 [default = false];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Digitizer_Channel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "0"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional double range = 2 [default = 1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->range(), target);
  }
  
  // optional .fetch.cfg.device.Digitizer.Channel.Coupling coupling = 3 [default = DC];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->coupling(), target);
  }
  
  // optional bool enabled = 4 [default = false];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Digitizer_Channel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "0"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional double range = 2 [default = 1];
    if (has_range()) {
      total_size += 1 + 8;
    }
    
    // optional .fetch.cfg.device.Digitizer.Channel.Coupling coupling = 3 [default = DC];
    if (has_coupling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->coupling());
    }
    
    // optional bool enabled = 4 [default = false];
    if (has_enabled()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Digitizer_Channel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Digitizer_Channel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Digitizer_Channel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Digitizer_Channel::MergeFrom(const Digitizer_Channel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_range(from.range());
    }
    if (from._has_bit(2)) {
      set_coupling(from.coupling());
    }
    if (from._has_bit(3)) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Digitizer_Channel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Digitizer_Channel::CopyFrom(const Digitizer_Channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Digitizer_Channel::IsInitialized() const {
  
  return true;
}

void Digitizer_Channel::Swap(Digitizer_Channel* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(range_, other->range_);
    std::swap(coupling_, other->coupling_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Digitizer_Channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Digitizer_Channel_descriptor_;
  metadata.reflection = Digitizer_Channel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Digitizer::_default_name_("Dev3");
const ::std::string Digitizer::_default_chan_names_("0");
#ifndef _MSC_VER
const int Digitizer::kNameFieldNumber;
const int Digitizer::kSampleRateFieldNumber;
const int Digitizer::kRecordSizeFieldNumber;
const int Digitizer::kNumRecordsFieldNumber;
const int Digitizer::kReferenceFieldNumber;
const int Digitizer::kChanNamesFieldNumber;
const int Digitizer::kNchannelsFieldNumber;
const int Digitizer::kChannelFieldNumber;
#endif  // !_MSC_VER

Digitizer::Digitizer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Digitizer::InitAsDefaultInstance() {
}

Digitizer::Digitizer(const Digitizer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Digitizer::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  sample_rate_ = 60000000;
  record_size_ = 7196u;
  num_records_ = 256u;
  reference_ = 0;
  chan_names_ = const_cast< ::std::string*>(&_default_chan_names_);
  nchannels_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Digitizer::~Digitizer() {
  SharedDtor();
}

void Digitizer::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (chan_names_ != &_default_chan_names_) {
    delete chan_names_;
  }
  if (this != default_instance_) {
  }
}

void Digitizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Digitizer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Digitizer_descriptor_;
}

const Digitizer& Digitizer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_digitizer_2eproto();  return *default_instance_;
}

Digitizer* Digitizer::default_instance_ = NULL;

Digitizer* Digitizer::New() const {
  return new Digitizer;
}

void Digitizer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->assign(_default_name_);
      }
    }
    sample_rate_ = 60000000;
    record_size_ = 7196u;
    num_records_ = 256u;
    reference_ = 0;
    if (_has_bit(5)) {
      if (chan_names_ != &_default_chan_names_) {
        chan_names_->assign(_default_chan_names_);
      }
    }
    nchannels_ = 1u;
  }
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Digitizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "Dev3"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sample_rate;
        break;
      }
      
      // optional double sample_rate = 2 [default = 60000000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_rate_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_record_size;
        break;
      }
      
      // optional uint32 record_size = 3 [default = 7196];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_size_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_records;
        break;
      }
      
      // optional uint32 num_records = 4 [default = 256];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_records:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_records_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_reference;
        break;
      }
      
      // optional double reference = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_reference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chan_names;
        break;
      }
      
      // optional string chan_names = 6 [default = "0"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chan_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chan_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chan_names().data(), this->chan_names().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nchannels;
        break;
      }
      
      // optional uint32 nchannels = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nchannels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nchannels_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_channel;
        break;
      }
      
      // repeated .fetch.cfg.device.Digitizer.Channel channel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_channel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Digitizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "Dev3"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional double sample_rate = 2 [default = 60000000];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sample_rate(), output);
  }
  
  // optional uint32 record_size = 3 [default = 7196];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->record_size(), output);
  }
  
  // optional uint32 num_records = 4 [default = 256];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_records(), output);
  }
  
  // optional double reference = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->reference(), output);
  }
  
  // optional string chan_names = 6 [default = "0"];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chan_names().data(), this->chan_names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->chan_names(), output);
  }
  
  // optional uint32 nchannels = 7 [default = 1];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nchannels(), output);
  }
  
  // repeated .fetch.cfg.device.Digitizer.Channel channel = 8;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->channel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Digitizer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "Dev3"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional double sample_rate = 2 [default = 60000000];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sample_rate(), target);
  }
  
  // optional uint32 record_size = 3 [default = 7196];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->record_size(), target);
  }
  
  // optional uint32 num_records = 4 [default = 256];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_records(), target);
  }
  
  // optional double reference = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->reference(), target);
  }
  
  // optional string chan_names = 6 [default = "0"];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chan_names().data(), this->chan_names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->chan_names(), target);
  }
  
  // optional uint32 nchannels = 7 [default = 1];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->nchannels(), target);
  }
  
  // repeated .fetch.cfg.device.Digitizer.Channel channel = 8;
  for (int i = 0; i < this->channel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->channel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Digitizer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "Dev3"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional double sample_rate = 2 [default = 60000000];
    if (has_sample_rate()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 record_size = 3 [default = 7196];
    if (has_record_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->record_size());
    }
    
    // optional uint32 num_records = 4 [default = 256];
    if (has_num_records()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_records());
    }
    
    // optional double reference = 5 [default = 0];
    if (has_reference()) {
      total_size += 1 + 8;
    }
    
    // optional string chan_names = 6 [default = "0"];
    if (has_chan_names()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chan_names());
    }
    
    // optional uint32 nchannels = 7 [default = 1];
    if (has_nchannels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nchannels());
    }
    
  }
  // repeated .fetch.cfg.device.Digitizer.Channel channel = 8;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channel(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Digitizer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Digitizer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Digitizer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Digitizer::MergeFrom(const Digitizer& from) {
  GOOGLE_CHECK_NE(&from, this);
  channel_.MergeFrom(from.channel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_sample_rate(from.sample_rate());
    }
    if (from._has_bit(2)) {
      set_record_size(from.record_size());
    }
    if (from._has_bit(3)) {
      set_num_records(from.num_records());
    }
    if (from._has_bit(4)) {
      set_reference(from.reference());
    }
    if (from._has_bit(5)) {
      set_chan_names(from.chan_names());
    }
    if (from._has_bit(6)) {
      set_nchannels(from.nchannels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Digitizer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Digitizer::CopyFrom(const Digitizer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Digitizer::IsInitialized() const {
  
  return true;
}

void Digitizer::Swap(Digitizer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(record_size_, other->record_size_);
    std::swap(num_records_, other->num_records_);
    std::swap(reference_, other->reference_);
    std::swap(chan_names_, other->chan_names_);
    std::swap(nchannels_, other->nchannels_);
    channel_.Swap(&other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Digitizer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Digitizer_descriptor_;
  metadata.reflection = Digitizer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace device
}  // namespace cfg
}  // namespace fetch

// @@protoc_insertion_point(global_scope)
