// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linear_scan_mirror.proto

#ifndef PROTOBUF_linear_5fscan_5fmirror_2eproto__INCLUDED
#define PROTOBUF_linear_5fscan_5fmirror_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace fetch {
namespace cfg {
namespace device {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_linear_5fscan_5fmirror_2eproto();
void protobuf_AssignDesc_linear_5fscan_5fmirror_2eproto();
void protobuf_ShutdownFile_linear_5fscan_5fmirror_2eproto();

class LinearScanMirror;

// ===================================================================

class LinearScanMirror : public ::google::protobuf::Message {
 public:
  LinearScanMirror();
  virtual ~LinearScanMirror();
  
  LinearScanMirror(const LinearScanMirror& from);
  
  inline LinearScanMirror& operator=(const LinearScanMirror& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinearScanMirror& default_instance();
  
  void Swap(LinearScanMirror* other);
  
  // implements Message ----------------------------------------------
  
  LinearScanMirror* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinearScanMirror& from);
  void MergeFrom(const LinearScanMirror& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double v_lim_max = 1 [default = 10];
  inline bool has_v_lim_max() const;
  inline void clear_v_lim_max();
  static const int kVLimMaxFieldNumber = 1;
  inline double v_lim_max() const;
  inline void set_v_lim_max(double value);
  
  // optional double v_lim_min = 2 [default = -10];
  inline bool has_v_lim_min() const;
  inline void clear_v_lim_min();
  static const int kVLimMinFieldNumber = 2;
  inline double v_lim_min() const;
  inline void set_v_lim_min(double value);
  
  // optional double vpp = 3 [default = 10];
  inline bool has_vpp() const;
  inline void clear_vpp();
  static const int kVppFieldNumber = 3;
  inline double vpp() const;
  inline void set_vpp(double value);
  
  // optional string ao_channel = 4 [default = "/Dev1/ao0"];
  inline bool has_ao_channel() const;
  inline void clear_ao_channel();
  static const int kAoChannelFieldNumber = 4;
  inline const ::std::string& ao_channel() const;
  inline void set_ao_channel(const ::std::string& value);
  inline void set_ao_channel(const char* value);
  inline void set_ao_channel(const char* value, size_t size);
  inline ::std::string* mutable_ao_channel();
  
  // @@protoc_insertion_point(class_scope:fetch.cfg.device.LinearScanMirror)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double v_lim_max_;
  double v_lim_min_;
  double vpp_;
  ::std::string* ao_channel_;
  static const ::std::string _default_ao_channel_;
  friend void  protobuf_AddDesc_linear_5fscan_5fmirror_2eproto();
  friend void protobuf_AssignDesc_linear_5fscan_5fmirror_2eproto();
  friend void protobuf_ShutdownFile_linear_5fscan_5fmirror_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LinearScanMirror* default_instance_;
};
// ===================================================================


// ===================================================================

// LinearScanMirror

// optional double v_lim_max = 1 [default = 10];
inline bool LinearScanMirror::has_v_lim_max() const {
  return _has_bit(0);
}
inline void LinearScanMirror::clear_v_lim_max() {
  v_lim_max_ = 10;
  _clear_bit(0);
}
inline double LinearScanMirror::v_lim_max() const {
  return v_lim_max_;
}
inline void LinearScanMirror::set_v_lim_max(double value) {
  _set_bit(0);
  v_lim_max_ = value;
}

// optional double v_lim_min = 2 [default = -10];
inline bool LinearScanMirror::has_v_lim_min() const {
  return _has_bit(1);
}
inline void LinearScanMirror::clear_v_lim_min() {
  v_lim_min_ = -10;
  _clear_bit(1);
}
inline double LinearScanMirror::v_lim_min() const {
  return v_lim_min_;
}
inline void LinearScanMirror::set_v_lim_min(double value) {
  _set_bit(1);
  v_lim_min_ = value;
}

// optional double vpp = 3 [default = 10];
inline bool LinearScanMirror::has_vpp() const {
  return _has_bit(2);
}
inline void LinearScanMirror::clear_vpp() {
  vpp_ = 10;
  _clear_bit(2);
}
inline double LinearScanMirror::vpp() const {
  return vpp_;
}
inline void LinearScanMirror::set_vpp(double value) {
  _set_bit(2);
  vpp_ = value;
}

// optional string ao_channel = 4 [default = "/Dev1/ao0"];
inline bool LinearScanMirror::has_ao_channel() const {
  return _has_bit(3);
}
inline void LinearScanMirror::clear_ao_channel() {
  if (ao_channel_ != &_default_ao_channel_) {
    ao_channel_->assign(_default_ao_channel_);
  }
  _clear_bit(3);
}
inline const ::std::string& LinearScanMirror::ao_channel() const {
  return *ao_channel_;
}
inline void LinearScanMirror::set_ao_channel(const ::std::string& value) {
  _set_bit(3);
  if (ao_channel_ == &_default_ao_channel_) {
    ao_channel_ = new ::std::string;
  }
  ao_channel_->assign(value);
}
inline void LinearScanMirror::set_ao_channel(const char* value) {
  _set_bit(3);
  if (ao_channel_ == &_default_ao_channel_) {
    ao_channel_ = new ::std::string;
  }
  ao_channel_->assign(value);
}
inline void LinearScanMirror::set_ao_channel(const char* value, size_t size) {
  _set_bit(3);
  if (ao_channel_ == &_default_ao_channel_) {
    ao_channel_ = new ::std::string;
  }
  ao_channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinearScanMirror::mutable_ao_channel() {
  _set_bit(3);
  if (ao_channel_ == &_default_ao_channel_) {
    ao_channel_ = new ::std::string(_default_ao_channel_);
  }
  return ao_channel_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace device
}  // namespace cfg
}  // namespace fetch

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_linear_5fscan_5fmirror_2eproto__INCLUDED
